// <copyright file="PostOrderDiscountUpdate.cs" company="">
// Copyright (c) 2016 All Rights Reserved
// </copyright>
// <author></author>
// <date>3/14/2016 3:36:29 PM</date>
// <summary>Implements the PostOrderDiscountUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace GSC.Rover.DMS.Platform.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using GSC.Rover.DMS.BusinessLogic.SalesOrderDiscount;
    using GSC.Rover.DMS.BusinessLogic.Common;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// PostOrderDiscountUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    public class PostOrderDiscountUpdate: Plugin
    {
        /// <summary>
        /// Alias of the image registered for the snapshot of the 
        /// primary entity's attributes before the core platform operation executes.
        /// The image contains the following attributes:
        /// All Attributes
        /// </summary>
        private readonly string preImageAlias = "PreImage";

        /// <summary>
        /// Alias of the image registered for the snapshot of the 
        /// primary entity's attributes after the core platform operation executes.
        /// The image contains the following attributes:
        /// All Attributes
        /// 
        /// Note: Only synchronous post-event and asynchronous registered plug-ins 
        /// have PostEntityImages populated.
        /// </summary>
        private readonly string postImageAlias = "PostImage";

        /// <summary>
        /// Initializes a new instance of the <see cref="PostOrderDiscountUpdate"/> class.
        /// </summary>
        public PostOrderDiscountUpdate()
            : base(typeof(PostOrderDiscountUpdate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "gsc_cmn_salesorderdiscount", new Action<LocalPluginContext>(ExecutePostOrderDiscountUpdate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePostOrderDiscountUpdate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;

            Entity preImageEntity = (context.PreEntityImages != null && context.PreEntityImages.Contains(this.preImageAlias)) ? context.PreEntityImages[this.preImageAlias] : null;
            Entity postImageEntity = (context.PostEntityImages != null && context.PostEntityImages.Contains(this.postImageAlias)) ? context.PostEntityImages[this.postImageAlias] : null;

            IOrganizationService service = localContext.OrganizationService;
            ITracingService trace = localContext.TracingService;

            if (!(context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)) { return; }

            Entity salesOrderDiscountEntity = (Entity)context.InputParameters["Target"];

            if (salesOrderDiscountEntity.LogicalName != "gsc_cmn_salesorderdiscount") { return; }

            if (context.Mode == 0) //Synchronous Plugin
            {
                try
                {
                    #region Pre-images
                    var preImageSalesOrderId = preImageEntity.GetAttributeValue<EntityReference>("gsc_salesorderid") != null
                        ? preImageEntity.GetAttributeValue<EntityReference>("gsc_salesorderid").Id
                        : Guid.Empty;
                    
                    var preImageSalesOrderDiscountAmount = preImageEntity.GetAttributeValue<Money>("gsc_discountamount") != null
                        ? preImageEntity.GetAttributeValue<Money>("gsc_discountamount").Value
                        : Decimal.Zero;
                    
                    var preImageApplyAmountToDp = preImageEntity.GetAttributeValue<Money>("gsc_applyamounttodp") != null
                        ? preImageEntity.GetAttributeValue<Money>("gsc_applyamounttodp").Value
                        : Decimal.Zero;

                    var preImageApplyAmountToAf = preImageEntity.GetAttributeValue<Money>("gsc_applyamounttoaf") != null
                        ? preImageEntity.GetAttributeValue<Money>("gsc_applyamounttoaf").Value
                        : Decimal.Zero;

                    var preImageApplyAmountToUp = preImageEntity.GetAttributeValue<Money>("gsc_applyamounttoup") != null
                        ? preImageEntity.GetAttributeValue<Money>("gsc_applyamounttoup").Value
                        : Decimal.Zero;
                    #endregion
                    
                    #region Post-images
                    var postImageSalesOrderId = postImageEntity.GetAttributeValue<EntityReference>("gsc_salesorderid") != null
                        ? postImageEntity.GetAttributeValue<EntityReference>("gsc_salesorderid").Id
                        : Guid.Empty;

                    var postImageSalesOrderDiscountAmount = postImageEntity.GetAttributeValue<Money>("gsc_discountamount") != null
                        ? postImageEntity.GetAttributeValue<Money>("gsc_discountamount").Value
                        : Decimal.Zero;

                    var postImageApplyAmountToDp = postImageEntity.GetAttributeValue<Money>("gsc_applyamounttodp") != null
                        ? postImageEntity.GetAttributeValue<Money>("gsc_applyamounttodp").Value
                        : Decimal.Zero;

                    var postImageApplyAmountToAf = postImageEntity.GetAttributeValue<Money>("gsc_applyamounttoaf") != null
                        ? postImageEntity.GetAttributeValue<Money>("gsc_applyamounttoaf").Value
                        : Decimal.Zero;

                    var postImageApplyAmountToUp = postImageEntity.GetAttributeValue<Money>("gsc_applyamounttoup") != null
                        ? postImageEntity.GetAttributeValue<Money>("gsc_applyamounttoup").Value
                        : Decimal.Zero;
                    #endregion
                    
                    string message = context.MessageName;

                    SalesOrderDiscountHandler salesOrderDiscountHandler = new SalesOrderDiscountHandler(service, trace);
                    
                    //Functions triggered on Sales Order, Sales Order Discount Amount, Apply Amount to DP, Apply Amount to AF, Apply Amount to DP change
                    if (preImageSalesOrderId != postImageSalesOrderId || preImageSalesOrderDiscountAmount != postImageSalesOrderDiscountAmount || preImageApplyAmountToDp != postImageApplyAmountToDp || preImageApplyAmountToAf != postImageApplyAmountToAf || preImageApplyAmountToUp != postImageApplyAmountToUp)
                    {
                        salesOrderDiscountHandler.SetOrderTotalDiscountAmount(postImageEntity, message);
                    }
                }
                catch (Exception ex)
                {
                    //throw new InvalidPluginExecutionException(String.Concat("(Exception)\n", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, error));
                    throw new InvalidPluginExecutionException(ex.Message);
                }
            }
        }
    }
}
