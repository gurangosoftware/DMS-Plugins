// <copyright file="PostOrderCreate.cs" company="">
// Copyright (c) 2016 All Rights Reserved
// </copyright>
// <author></author>
// <date>3/4/2016 6:23:37 PM</date>
// <summary>Implements the PostOrderCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace GSC.Rover.DMS.Platform.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using GSC.Rover.DMS.BusinessLogic.SalesOrder;
    using GSC.Rover.DMS.BusinessLogic.Common;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// PostOrderCreate Plugin.
    /// </summary>    
    public class PostOrderCreate : Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOrderCreate"/> class.
        /// </summary>
        public PostOrderCreate()
            : base(typeof(PostOrderCreate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Create", "salesorder", new Action<LocalPluginContext>(ExecutePostOrderCreate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePostOrderCreate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;
            ITracingService trace = localContext.TracingService;
            Entity salesOrderEntity = (Entity)context.InputParameters["Target"];

            string message = context.MessageName;
            string error = "";

            try
            {
                SalesOrderHandler salesOrderHandler = new SalesOrderHandler(service, trace);

               EntityCollection salesOrderRecords = CommonHandler.RetrieveRecordsByOneValue("salesorder", "salesorderid", salesOrderEntity.Id, service, null, OrderType.Ascending,
                    new[] { "salesorderid", "quoteid", "gsc_productid", "ordernumber", 
                        "gsc_vehiclecolorid1", "gsc_vehiclecolorid2", "gsc_vehiclecolorid3", "createdon", 
                        "gsc_accessories", "gsc_colorprice", "gsc_financingschemeid", "gsc_amountfinanced", "gsc_bankid",  "gsc_vehicleunitprice", "gsc_netmonthlyamortization","gsc_insuranceid" });

               if (salesOrderRecords != null && salesOrderRecords.Entities.Count > 0)
               {
                   Entity salesOrder = salesOrderRecords.Entities[0];

                   salesOrderHandler.ReplicateQuoteVehicleAccessories(salesOrder);
                   salesOrderHandler.ReplicateQuoteDiscount(salesOrder);
                   salesOrderHandler.ReplicateQuoteCharges(salesOrder);
                   //salesOrderHandler.CreateCoverageAvailable(salesOrder, message);
                   salesOrderHandler.CreateRequirementChecklist(salesOrder, message);
                   salesOrderHandler.DeleteExistingMonthlyAmortizationRecords(salesOrder);
                   salesOrderHandler.GetSelectedMonthlyAmortization(salesOrder);
                   salesOrderHandler.GenerateAccessoriesforVehicleModel(salesOrder);
                   salesOrderHandler.ReplicateQuoteCabChassis(salesOrder);
               }
            }
            catch (Exception ex)
            {
                //throw new InvalidPluginExecutionException(String.Concat("(Exception)\n", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, error));
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }
    }
}
