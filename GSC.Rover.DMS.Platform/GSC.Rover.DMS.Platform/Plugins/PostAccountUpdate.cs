// <copyright file="PostAccountUpdate.cs" company="">
// Copyright (c) 2016 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/28/2016 6:24:33 PM</date>
// <summary>Implements the PostAccountUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace GSC.Rover.DMS.Platform.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using GSC.Rover.DMS.BusinessLogic.Account;

    /// <summary>
    /// PostAccountUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    public class PostAccountUpdate: Plugin
    {
        /// <summary>
        /// Alias of the image registered for the snapshot of the 
        /// primary entity's attributes before the core platform operation executes.
        /// The image contains the following attributes:
        /// No Attributes
        /// </summary>
        private readonly string preImageAlias = "preImage";

        /// <summary>
        /// Alias of the image registered for the snapshot of the 
        /// primary entity's attributes after the core platform operation executes.
        /// The image contains the following attributes:
        /// No Attributes
        /// 
        /// Note: Only synchronous post-event and asynchronous registered plug-ins 
        /// have PostEntityImages populated.
        /// </summary>
        private readonly string postImageAlias = "postImage";

        /// <summary>
        /// Initializes a new instance of the <see cref="PostAccountUpdate"/> class.
        /// </summary>
        public PostAccountUpdate()
            : base(typeof(PostAccountUpdate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "account", new Action<LocalPluginContext>(ExecutePostAccountUpdate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePostAccountUpdate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;

            Entity preImageEntity = (context.PreEntityImages != null && context.PreEntityImages.Contains(this.preImageAlias)) ? context.PreEntityImages[this.preImageAlias] : null;
            Entity postImageEntity = (context.PostEntityImages != null && context.PostEntityImages.Contains(this.postImageAlias)) ? context.PostEntityImages[this.postImageAlias] : null;

            IOrganizationService service = localContext.OrganizationService;
            ITracingService trace = localContext.TracingService;

            if (!(context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)) { return; }

            Entity accountEntity = (Entity)context.InputParameters["Target"];

            if (accountEntity.LogicalName != "account") { return; }

            if (context.Mode == 0) //Synchronous Plugin
            {
                try
                {
                    AccountHandler accountHandler = new AccountHandler(service, trace);

                    #region pre-Image

                    var preImageDealer = preImageEntity.GetAttributeValue<EntityReference>("parentaccountid") != null
                        ? preImageEntity.GetAttributeValue<EntityReference>("parentaccountid").Id
                        : Guid.Empty;
                    var preImageProvince = preImageEntity.GetAttributeValue<EntityReference>("gsc_provinceid") != null
                        ? preImageEntity.GetAttributeValue<EntityReference>("gsc_provinceid").Id
                        : Guid.Empty;
                    var preImageTaxId = preImageEntity.GetAttributeValue<EntityReference>("gsc_taxid") != null
                        ? preImageEntity.GetAttributeValue<EntityReference>("gsc_taxid").Id
                        : Guid.Empty;
                    var preImagePartsTaxId = preImageEntity.GetAttributeValue<EntityReference>("gsc_partswithholdingtaxid") != null
                        ? preImageEntity.GetAttributeValue<EntityReference>("gsc_partswithholdingtaxid").Id
                        : Guid.Empty;
                    var preImageVehicleTaxId = preImageEntity.GetAttributeValue<EntityReference>("gsc_vehiclewithholdingtaxid") != null
                        ? preImageEntity.GetAttributeValue<EntityReference>("gsc_vehiclewithholdingtaxid").Id
                        : Guid.Empty;
                    var preImagePrimaryContactId = preImageEntity.GetAttributeValue<EntityReference>("primarycontactid") != null
                        ? preImageEntity.GetAttributeValue<EntityReference>("primarycontactid").Id
                        : Guid.Empty;
                    var preImageAccountName = preImageEntity.Contains("name") ? preImageEntity.GetAttributeValue<String>("name") : String.Empty;
                    var preImageIsPotential = preImageEntity.GetAttributeValue<Boolean>("gsc_ispotential");

                    var preImageCityName = preImageEntity.Contains("gsc_cityname") ? preImageEntity.GetAttributeValue<string>("gsc_cityname") : string.Empty;

                    var preImageCityIdName = preImageEntity.Contains("gsc_cityid") ? preImageEntity.GetAttributeValue<EntityReference>("gsc_cityid").Name
                        : String.Empty;

                    #endregion

                    #region post-Image

                    var postImageDealer = postImageEntity.GetAttributeValue<EntityReference>("parentaccountid") != null
                        ? postImageEntity.GetAttributeValue<EntityReference>("parentaccountid").Id
                        : Guid.Empty;
                    var postImageProvince = postImageEntity.GetAttributeValue<EntityReference>("gsc_provinceid") != null
                        ? postImageEntity.GetAttributeValue<EntityReference>("gsc_provinceid").Id
                        : Guid.Empty;
                    var postImageTaxId = postImageEntity.GetAttributeValue<EntityReference>("gsc_taxid") != null
                        ? postImageEntity.GetAttributeValue<EntityReference>("gsc_taxid").Id
                        : Guid.Empty;
                    var postImagePartsTaxId = postImageEntity.GetAttributeValue<EntityReference>("gsc_partswithholdingtaxid") != null
                        ? postImageEntity.GetAttributeValue<EntityReference>("gsc_partswithholdingtaxid").Id
                        : Guid.Empty;
                    var postImageVehicleTaxId = postImageEntity.GetAttributeValue<EntityReference>("gsc_vehiclewithholdingtaxid") != null
                        ? postImageEntity.GetAttributeValue<EntityReference>("gsc_vehiclewithholdingtaxid").Id
                        : Guid.Empty; ;
                    var postImagePrimaryContactId = postImageEntity.GetAttributeValue<EntityReference>("primarycontactid") != null
                        ? postImageEntity.GetAttributeValue<EntityReference>("primarycontactid").Id
                        : Guid.Empty;
                    var postImageAccountName = postImageEntity.Contains("name") ? postImageEntity.GetAttributeValue<String>("name")
                        : String.Empty;
                    var postImageIsPotential = postImageEntity.GetAttributeValue<Boolean>("gsc_ispotential");
                    var postImageCityName = postImageEntity.Contains("gsc_cityname") ? postImageEntity.GetAttributeValue<string>("gsc_cityname")
                        : String.Empty;
                    var postImageCityIdName = postImageEntity.Contains("gsc_cityid") ? postImageEntity.GetAttributeValue<EntityReference>("gsc_cityid").Name
                        : String.Empty;

                    #endregion

                    if (preImageAccountName != postImageAccountName)
                    {
                        accountHandler.CheckForExistingRecords(postImageEntity);
                    }

                    if (preImageDealer != postImageDealer)
                    {
                        accountHandler.PopulateDealerCode(accountEntity);
                    }

                    if (preImageProvince != postImageProvince)
                    {
                        accountHandler.PopulateRegion(accountEntity);
                    }

                    if (preImageTaxId != postImageTaxId)
                    {
                        accountHandler.PopulateTaxRate(accountEntity);
                    }

                    if (preImagePartsTaxId != postImagePartsTaxId)
                    {
                        accountHandler.PopulateWithholdingTaxRate(accountEntity, "gsc_partswithholdingtaxid", "gsc_partswithholdingtaxrate");
                    }

                    if (preImageVehicleTaxId != postImageVehicleTaxId)
                    {
                        accountHandler.PopulateWithholdingTaxRate(accountEntity, "gsc_vehiclewithholdingtaxid", "gsc_vehiclewithholdingtaxrate");
                    }

                    if (preImagePrimaryContactId != postImagePrimaryContactId)
                    {
                        accountHandler.PopulatePrimaryContactDetails(postImageEntity);
                    }

                    if (preImageIsPotential != postImageIsPotential && postImageIsPotential == false)
                    {
                        accountHandler.CreateContactPerson(postImageEntity);
                    }

                    if (postImageCityName != postImageCityIdName && postImageCityName != String.Empty && preImageCityIdName == postImageCityIdName)
                    {
                        accountHandler.SetCity(postImageEntity);
                    }
                }

                catch (Exception ex)
                {
                    if (ex.Message.Contains("This record has been identified as a fraud account. Please ask the customer to provide further information."))
                        throw new InvalidPluginExecutionException("This record has been identified as a fraud account. Please ask the customer to provide further information.");
                    else if (ex.Message.Contains("Account name already exists."))
                        throw new InvalidPluginExecutionException("Account name already exists.");
                    else
                        throw new InvalidPluginExecutionException(ex.Message);
                }
            }
        }
    }
}
