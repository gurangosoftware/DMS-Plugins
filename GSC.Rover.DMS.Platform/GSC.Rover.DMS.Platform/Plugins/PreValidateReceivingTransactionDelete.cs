// <copyright file="PreValidateReceivingTransactionDelete.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>2/3/2017 3:51:47 PM</date>
// <summary>Implements the PreValidateReceivingTransactionDelete Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace GSC.Rover.DMS.Platform.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using GSC.Rover.DMS.BusinessLogic.ReceivingTransaction;
    using GSC.Rover.DMS.BusinessLogic.Common;
    /// <summary>
    /// PreValidateReceivingTransactionDelete Plugin.
    /// </summary>    
    public class PreValidateReceivingTransactionDelete : Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreValidateReceivingTransactionDelete"/> class.
        /// </summary>
        public PreValidateReceivingTransactionDelete()
            : base(typeof(PreValidateReceivingTransactionDelete))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(10, "Delete", "gsc_cmn_receivingtransaction", new Action<LocalPluginContext>(ExecutePreValidateReceivingTransactionDelete)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreValidateReceivingTransactionDelete(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;
            ITracingService trace = localContext.TracingService;
            var ReceivingTransactionTargetEntity = (EntityReference)context.InputParameters["Target"];

            try
            {
                ReceivingTransactionHandler ReceivingTransaction = new ReceivingTransactionHandler(service, trace);

                EntityCollection ReceivingTransactionEC = CommonHandler.RetrieveRecordsByOneValue(ReceivingTransactionTargetEntity.LogicalName, "gsc_cmn_receivingtransactionid", ReceivingTransactionTargetEntity.Id, service,
                    null, OrderType.Ascending, new[] { "gsc_cmn_receivingtransactionid", "gsc_receivingstatus", "gsc_purchaseorderid" });

                if (ReceivingTransactionEC.Entities.Count > 0)
                {
                    Entity ReceivingTransactionEntity = ReceivingTransactionEC.Entities[0];

                    var status = ReceivingTransactionEntity.Contains("gsc_receivingstatus")
                        ? ReceivingTransactionEntity.GetAttributeValue<OptionSetValue>("gsc_receivingstatus").Value
                        : 0;

                    if (status == 100000003)
                    {
                        if (ReceivingTransaction.IsAllocatedVehicle(ReceivingTransactionEntity) == true)
                            throw new InvalidPluginExecutionException("Vehicle is currently allocated, remove the allocation to delete the record.");
                    }

                    else if (status == 100000000)
                        throw new InvalidPluginExecutionException("Cannot delete cancelled transaction.");

                    else if (status == 100000004)
                        throw new InvalidPluginExecutionException("Cannot delete received transaction.");

                    //ReceivingTransaction.TagVPOReceivingStatusCreated(ReceivingTransactionEntity);
                    ReceivingTransaction.DeleteReceivingTransaction(ReceivingTransactionEntity);
                    ReceivingTransaction.DeleteReceivingComponents(ReceivingTransactionEntity);

                }
            }

            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
                //throw new InvalidPluginExecutionException(String.Concat("(Exception)\n", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine));
            }

        }
    }
}
