// <copyright file="PostVehicleSalesReturnUpdate.cs" company="">
// Copyright (c) 2016 All Rights Reserved
// </copyright>
// <author></author>
// <date>6/1/2016 3:13:39 PM</date>
// <summary>Implements the PostVehicleSalesReturnUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace GSC.Rover.DMS.Platform.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Crm.Sdk.Messages;
    using GSC.Rover.DMS.BusinessLogic.VehicleSalesReturn;
    using GSC.Rover.DMS.BusinessLogic.Common;
    using GSC.Rover.DMS.BusinessLogic.SalesReturnDetail;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// PostVehicleSalesReturnUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    public class PostVehicleSalesReturnUpdate : Plugin
    {
        /// <summary>
        /// Alias of the image registered for the snapshot of the 
        /// primary entity's attributes before the core platform operation executes.
        /// The image contains the following attributes:
        /// All Attributes
        /// </summary>
        private readonly string preImageAlias = "PreImage";

        /// <summary>
        /// Alias of the image registered for the snapshot of the 
        /// primary entity's attributes after the core platform operation executes.
        /// The image contains the following attributes:
        /// All Attributes
        /// 
        /// Note: Only synchronous post-event and asynchronous registered plug-ins 
        /// have PostEntityImages populated.
        /// </summary>
        private readonly string postImageAlias = "PostImage";

        /// <summary>
        /// Initializes a new instance of the <see cref="PostVehicleSalesReturnUpdate"/> class.
        /// </summary>
        public PostVehicleSalesReturnUpdate()
            : base(typeof(PostVehicleSalesReturnUpdate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "gsc_sls_vehiclesalesreturn", new Action<LocalPluginContext>(ExecutePostVehicleSalesReturnUpdate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePostVehicleSalesReturnUpdate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;
            ITracingService trace = localContext.TracingService;

            Entity preImageEntity = (context.PreEntityImages != null && context.PreEntityImages.Contains(this.preImageAlias)) ? context.PreEntityImages[this.preImageAlias] : null;
            Entity postImageEntity = (context.PostEntityImages != null && context.PostEntityImages.Contains(this.postImageAlias)) ? context.PostEntityImages[this.postImageAlias] : null;

            if (!(context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)) { return; }

            if (postImageEntity.LogicalName != "gsc_sls_vehiclesalesreturn") { return; }

            string message = context.MessageName;
           
            try
            {
                VehicleSalesReturnHandler vehicleSalesReturnHandler = new VehicleSalesReturnHandler(service, trace);

                var preImageInvoiceId = preImageEntity.Contains("gsc_invoiceid")
                         ? preImageEntity.GetAttributeValue<EntityReference>("gsc_invoiceid").Id
                         : Guid.Empty;

                var postImageInvoiceId = postImageEntity.Contains("gsc_invoiceid")
                        ? postImageEntity.GetAttributeValue<EntityReference>("gsc_invoiceid").Id
                        : Guid.Empty;

                var preImagePostTransaction = preImageEntity.Contains("gsc_posttransaction")
                       ? preImageEntity.GetAttributeValue<bool>("gsc_posttransaction")
                       : false;

                var postImagePostTransaction = postImageEntity.Contains("gsc_posttransaction")
                        ? postImageEntity.GetAttributeValue<bool>("gsc_posttransaction")
                        : false;


                //execute when Invoice id was changed
                if (preImageInvoiceId != postImageInvoiceId)
                {
                    vehicleSalesReturnHandler.ReplicateInvoicedVehicle(postImageEntity, message);
                    }

                    
                //execute when PostTransaction was changed
                if (preImagePostTransaction != postImagePostTransaction && postImagePostTransaction != false)
                {
                    trace.Trace("Post Transaction COndition");
                    EntityCollection salesReturnDetailCollection = CommonHandler.RetrieveRecordsByOneValue("gsc_iv_salesreturndetail", "gsc_vehiclesalesreturnid", postImageEntity.Id, service, null, OrderType.Ascending,
                            new[] { "gsc_inventoryid", "gsc_branchsiteid" });
                    trace.Trace("Condition if not null");
                    if(salesReturnDetailCollection.Entities.Count>1)
                    {
                        trace.Trace("More than 1 SalesReturnDetail record retrieved... " + salesReturnDetailCollection.Entities.Count);
                    }
                    trace.Trace("Sales ReturnDetail");
                    SalesReturnDetailHandler salesReturnDetailHandler = new SalesReturnDetailHandler(service, trace);
                    
                    //Update Quantity Cout
                    trace.Trace("Update Quantity Cout");
                    if (salesReturnDetailCollection.Entities.Count > 0)
                    {
                        salesReturnDetailHandler.PostTransaction(salesReturnDetailCollection.Entities[0]);
                    }

                    //Update VSR Status
                    trace.Trace("Update VSR Status");
                    vehicleSalesReturnHandler.PostTransaction(postImageEntity);
                    trace.Trace("DeleteTransactedVehicle");
                    vehicleSalesReturnHandler.DeleteTransactedVehicle(postImageEntity);
                    trace.Trace("CreateReturnedInventoryHistory");
                    vehicleSalesReturnHandler.CreateReturnedInventoryHistory(postImageEntity);
                }
                
            }

            catch (Exception ex)
            {
                if (ex.Message.Contains("Sales invoice selected already returned."))
                    throw new InvalidPluginExecutionException(ex.Message);
                else
                throw new InvalidPluginExecutionException(String.Concat("(Exception)\n", ex.Message, Environment.NewLine, ex.StackTrace));
            }
        }
    }
}
